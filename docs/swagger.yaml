basePath: /api/v0.1
definitions:
  controllers.RandomUser:
    properties:
      age:
        example: 25
        type: integer
      coverImageUrl:
        example: cover.png
        type: string
      lat:
        example: 22.51
        type: number
      lng:
        example: 113.95
        type: number
      location:
        example: 南山区
        type: string
      occupation:
        example: 平面设计师
        type: string
      petName:
        example: Amy
        type: string
      userName:
        example: 豆豆
        type: string
    type: object
  controllers.RecommendedUser:
    properties:
      age:
        example: 25
        type: integer
      coverImageUrl:
        example: cover.png
        type: string
      images:
        example:
        - img1.jpg
        - img2.jpg
        items:
          type: string
        type: array
      lat:
        example: 22.51
        type: number
      lng:
        example: 113.95
        type: number
      location:
        example: 南山区
        type: string
      occupation:
        example: 平面设计师
        type: string
      petName:
        example: Amy
        type: string
      tags:
        example: 猫控 读书达人 电影爱好者
        type: string
      userName:
        example: 豆豆
        type: string
      verified:
        example: true
        type: boolean
    type: object
  controllers.UserDetails:
    properties:
      age:
        example: 25
        type: integer
      birthday:
        example: "1988-10-2"
        type: string
      constellation:
        example: 处女座
        type: string
      cover_Image:
        example: http://x.x.x.x:x/images/cover.png
        type: string
      declaration:
        example: 交友宣言
        type: string
      education:
        example: 本科
        type: string
      gender:
        example: 1
        type: integer
      height:
        example: 165cm
        type: string
      hobbies:
        example: 兴趣爱好
        type: string
      hometown:
        example: 湖南长沙
        type: string
      images:
        example:
        - http://x.x.x.x:x/images/img1.jpg
        - http://x.x.x.x:x/images/img2.jpg
        items:
          type: string
        type: array
      income:
        example: 15-25w
        type: string
      location:
        example: 深圳
        type: string
      marriage:
        example: 未婚
        type: string
      occupation:
        example: 平面设计师
        type: string
      purpose:
        example: 交友
        type: string
      selfDesc:
        example: 自我描述
        type: string
      tags:
        example:
        - 猫控
        - 读书达人
        - 电影爱好者
        - 旅行者
        items:
          type: string
        type: array
      theOne:
        example: 希望另一半的样子
        type: string
      userName:
        example: 豆豆
        type: string
      weight:
        example: 43kg
        type: string
    type: object
  models.AutoLogin:
    properties:
      code:
        example: xtdad-fdfdsf
        type: string
    type: object
  models.BasicInfo:
    properties:
      birth_day:
        example: "2010-10-09"
        type: string
      constellation:
        example: 白羊座
        type: string
      education:
        example: 本科
        type: string
      gender:
        example: 1
        type: integer
      height:
        example: 178
        type: number
      hometown:
        example: 重庆
        type: string
      location:
        example: 深圳
        type: string
      marriage:
        example: 未婚
        type: string
      occupation:
        example: 设计师
        type: string
      weight:
        example: 56.5
        type: number
    type: object
  models.Pagination:
    properties:
      limit:
        example: 4
        type: integer
      offset:
        example: 0
        type: integer
    type: object
  models.RecommendSetting:
    properties:
      age_Max:
        example: 40
        type: integer
      age_Min:
        example: 22
        type: integer
      gender:
        example: 女生
        type: string
      hometown:
        example: 同省优先
        type: string
      location:
        example: 只要同城
        type: string
      pet_Lover:
        example: 喜欢就行
        type: string
      tags:
        example: 不限
        type: string
    type: object
  models.SquareSettings:
    properties:
      gender:
        example: 女生
        type: string
      location:
        example: 不限
        type: string
    type: object
  models.Token:
    properties:
      accessToken:
        example: cdaefj93sds-eqedsdsdsa-3sadasdsss
        type: string
      expiresIn:
        example: 186624000
        type: integer
      tokenType:
        example: bearer
        type: string
    type: object
  models.UserGender:
    properties:
      gender:
        example: 1
        type: integer
    type: object
  models.UserProfileForm:
    properties:
      code:
        example: xtdad-fdfdsf
        type: string
      encryptedData:
        example: 7SfFtStsHqKZYhbIkke3BH2bCRzGD15T0jEiUtuksrl9lDeHm9LsPmswJymBXuinPCiXkZhd/uq7s7pACTvbWuvvoKEwz5fAJ6Vr9bTx79XVxiIN4r+Fwm6QHO9DjPkFrxTGAZvMYLyH6IOyOV/nmmlMoBM3G4peSnBi1qCYukwlyCMNp67lb93wSiPAoI7eRhYYw8ayPTsZ/MAJ9CBBUiCwM5aFOUWrMKNTikeq7YVjNCv7KCz0LJTrMKda0YMS0J/034L8x9vJ1OnIkxlWVMQEy/f55IfWVHI1I1fSKd5azzyVKXCbWDpU0PLJnU8XM/l4L7ZUlDOcRMR5KQVGhB9rIjVkykdXUPQK87v8lpnitslK06XceOJqDjK6mRkhJWOYpFUozZa6idFV6xmLZX8bkBsLxczzp1h/satEH7rIz3nKbxd3O1c+3dI2soSt8qFtaumcGdwhenTm+at0gxccAp8JD8PZiB5ZDLTofZIQ4RmI004SIExYUDZUje9mZO+3aC8McVwzrEyK7NKD/NZ5/dYPgDRwzBl1Vm99niY=
        type: string
      iv:
        example: z3tGYrgMcbLzd0qXqZuduQ==
        type: string
      rawData:
        example: ""
        type: string
      signature:
        example: ""
        type: string
      userInfo:
        example: ""
        type: string
    type: object
host: 1.12.243.73:8686
info:
  contact:
    email: 726569998@qq.com
    name: Frank Sheng
  description: Hello Peer是一款基于兴趣的社交应用。
  termsOfService: API文档仅用于Hello Peer研发使用。
  title: Hello Peer API
  version: "0.1"
paths:
  /auth/authlogin:
    post:
      consumes:
      - application/json
      description: 通过传递微信登录code以及getUserProfile返回字段换取用户token
      operationId: authlogin
      parameters:
      - description: 微信登录code以及getUserProfile返回字段
        in: body
        name: code
        required: true
        schema:
          $ref: '#/definitions/models.UserProfileForm'
      produces:
      - application/json
      responses:
        "0":
          description: ""
          schema:
            $ref: '#/definitions/models.Token'
      summary: 授权用户登录
      tags:
      - Auth
  /auth/autologin:
    post:
      consumes:
      - application/json
      description: 通过传递微信登录code换取用户token
      operationId: autologin
      parameters:
      - description: 微信登录code
        in: body
        name: code
        required: true
        schema:
          $ref: '#/definitions/models.AutoLogin'
      produces:
      - application/json
      responses:
        "0":
          description: ""
          schema:
            $ref: '#/definitions/models.Token'
      summary: 未授权用户登录
      tags:
      - Auth
  /images/{file_name}:
    get:
      description: 获取图片
      operationId: get_image
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      responses:
        "200":
          description: ""
      security:
      - x-token: []
      summary: 获取图片
      tags:
      - Util
  /settings/getRecommendSetting:
    get:
      consumes:
      - application/json
      description: 可通过用户ID获取用户推荐设置
      operationId: get_recommend_settings
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RecommendSetting'
      security:
      - x-token: []
      summary: 获取用户推荐设置
      tags:
      - Settings
  /settings/getSquareSetting:
    get:
      consumes:
      - application/json
      description: 可通过用户ID获取用户广场设置
      operationId: get_square_settings
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SquareSettings'
      security:
      - x-token: []
      summary: 获取用户广场设置
      tags:
      - Settings
  /settings/setRecommendSetting:
    post:
      consumes:
      - application/json
      description: 可设置用户广场设置
      operationId: set_recommend_settings
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      - description: 设置
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/models.RecommendSetting'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - x-token: []
      summary: 设置用户广场设置
      tags:
      - Settings
  /settings/setSquareSetting:
    post:
      consumes:
      - application/json
      description: 可设置用户广场设置
      operationId: set_square_settings
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      - description: 设置
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/models.SquareSettings'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - x-token: []
      summary: 设置用户广场设置
      tags:
      - Settings
  /user/getRandomUserDetails/{user_id}:
    get:
      consumes:
      - application/json
      description: 可通过用户ID获取用户详情
      operationId: get_random_users_details
      parameters:
      - description: 用户ID
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserDetails'
      summary: 获取广场用户详情
      tags:
      - User
  /user/getRandomUsers:
    post:
      consumes:
      - application/json
      description: 可通过用户ID以及用户广场设置项获取随机用户列表
      operationId: get_random_users_list_in_square
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      - description: 分页
        in: body
        name: pagination
        required: true
        schema:
          $ref: '#/definitions/models.Pagination'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.RandomUser'
            type: array
      security:
      - x-token: []
      summary: 获取用户广场随机用户列表
      tags:
      - User
  /user/getRecommendedUserList:
    get:
      consumes:
      - application/json
      description: 可通过用户ID获取推荐用户列表
      operationId: get_recommended_user_list
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.RecommendedUser'
            type: array
      security:
      - x-token: []
      summary: 获取用户推荐用户列表
      tags:
      - User
  /user/getUserDetails:
    get:
      consumes:
      - application/json
      description: 可获取用户详情
      operationId: get_user_details
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserDetails'
      security:
      - x-token: []
      summary: 获取用户详情
      tags:
      - User
  /user/setUserBasicInfo:
    post:
      consumes:
      - application/json
      description: 可通过用户token设置用户基础信息
      operationId: set_user_basic_info
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      - description: 用户基础信息
        in: body
        name: basicInfo
        required: true
        schema:
          $ref: '#/definitions/models.BasicInfo'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - x-token: []
      summary: 设置用户基础信息
      tags:
      - User
  /user/setUserGender:
    post:
      consumes:
      - application/json
      description: 可通过用户token设置用户性别
      operationId: set_user_gender
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      - description: 用户性别
        in: body
        name: gender
        required: true
        schema:
          $ref: '#/definitions/models.UserGender'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - x-token: []
      summary: 设置用户性别
      tags:
      - User
  /user/upload/setUserAvatar:
    post:
      consumes:
      - multipart/form-data
      description: 用户可设置头像
      operationId: set_user_avatar
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      - description: 头像文件
        in: formData
        name: content
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - x-token: []
      summary: 设置用户头像
      tags:
      - User
  /user/upload/setUserCover:
    post:
      consumes:
      - multipart/form-data
      description: 用户可设置封面图
      operationId: set_user_cover
      parameters:
      - description: Authorization
        in: header
        name: x-token
        required: true
        type: string
      - description: 封面文件
        in: formData
        name: content
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - x-token: []
      summary: 设置用户封面图
      tags:
      - User
swagger: "2.0"
